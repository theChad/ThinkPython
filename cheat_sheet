Think Python
---------------
Constructs/statements: if, for, while
symbol functions: type, isinstance, hasattr, getattr, vars
Input/output: input, pprint
Files: open
Character functions: ord, chr
String methods: join, split, strip, zfill, islower, isupper, lower, upper, replace, repr
String operators: +, *, slice[s:e:i], format operator %
List methods: pop, remove, sort, append, extend
List operators: del, +, *, slice[s:e:i], in, is
List functions: sorted
Dictionary operators: in
Dictionary methods: values, keys, get, items, update
Dictionary functions: dict, sorted, dict(zip(keys, values))
Exceptions: raise, LookupError()
Tuple: immutable list
Tuple functions: sorted, reversed
Tuple operators: assignment, return, *, for
iterator objects: zip, items (dictionary)
enumerate object: enumerate (index, element)
profile module: benchmarking
Files: open('w'), write, close
os: getcwd, listdir, chdir, walk, popen (now deprecated - use subprocess)
os.path: abspath, exists, isdir, isfile, join
errors: try..except, raise, assert
databases: dbm.open, <dbname>.close
pickle: dumps, loads, shelve (module for pickle + dbm)
interpreter: import, reload(tricky - may just want to restart interpreter)
copy: copy, deepcopy

Classes
--------
methods: subject assigned to first parameter, called self by convention
init: __init__, called on instantiation
__str__ : return string representation
__add__ : overload + operator
__radd__ : overload + operator, object as second argument (swaps arguments)

Emacs
-----------
M-x run-python: open python interpreter
C-c C-p : ^^ same as run-python
C-c C-z : open a python shell
C-c C-c : run the content of the buffer in the opened python shell
C-c C-r : run the selected region in the python shell

